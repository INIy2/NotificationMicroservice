version: "3.8"

services:
  db:
    image: postgres:17
    container_name: notification_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-password}
      POSTGRES_DB: ${DB_NAME:-notification_db}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - notification_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: notification_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - notification_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification_app
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DB_USER=${DB_USER:-postgres}
      - DB_HOST=${DB_HOST:-db}
      - DB_NAME=${DB_NAME:-notification_db}
      - DB_PASS=${DB_PASS:-password}
      - DB_PORT=5432
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      - db
      - rabbitmq
    command: [
        "sh",
        "-c",
        "until pg_isready -h db -p 5432 -U ${DB_USER:-postgres}; do echo Waiting for Postgres...; sleep 2; done; \
        until curl -s http://rabbitmq:15672/api/health; do echo Waiting for RabbitMQ...; sleep 2; done; \
        node app.js",
      ]
    networks:
      - notification_network
    restart: always

volumes:
  db_data:

networks:
  notification_network:
